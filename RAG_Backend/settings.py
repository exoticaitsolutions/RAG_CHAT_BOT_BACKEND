"""
Django settings for RAG_Backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from django.conf.urls.static import static

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import pymysql
pymysql.install_as_MySQLdb()
AUTH_USER_MODEL = 'RAG_CHATBOT_BACKEND_APIS.CustomUser'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4rui8%q0xhb&$s3ju5-yp^j0i5&@i(pyrople(9y^9g723q@5y'
BASE_APP_URL = os.getenv("BASE_APP_URL", "http://127.0.0.1:8000")  # Default to localhost
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "portal.chatbot.localhost.com"]

BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'RAG_CHATBOT_BACKEND_APIS/static'),
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",  # Example: Frontend app
    "https://yourdomain.com",
]
CORS_ALLOW_ALL_ORIGINS = True  # Allows all domains to access the API
CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-requested-with",
    "accept",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Application definition
APPEND_SLASH =False
MEDIA_URL = f'/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
COPY_ROOT = os.path.join(BASE_DIR, 'Copy_Records/')
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)
INSTALLED_APPS: list[str] = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'RAG_CHATBOT_BACKEND_APIS',
    'drf_yasg',
    'django.contrib.humanize',
    "corsheaders"    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'RAG_Backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                 'django.template.context_processors.media',
                 'RAG_CHATBOT_BACKEND_APIS.app.http.context_processors.chatbot_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'RAG_Backend.wsgi.application'

load_dotenv()
DB_TYPE = os.getenv('DB_TYPE')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# 
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# __import__('pysqlite3')
# import sys

# sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')


if DB_TYPE == 'sqlite3':
    print('Using SQLite3')
    DATABASES = {
    "default": { "ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3", }  }
else:
    print('Using MySQL')
    DATABASES = {
        'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DATABASE'),
        'USER': os.getenv('MYSQL_USER'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'OPTIONS': {
            'charset': 'utf8mb4',
        }
    }
    }
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.hostinger.com"
EMAIL_PORT = 465
EMAIL_USE_SSL = True  # Since we use port 465
EMAIL_USE_TLS = False  # Must be False when using SSL
EMAIL_HOST_USER = "pythonweb@exoticaitsolutions.com"
EMAIL_HOST_PASSWORD = "Webpython@123#"  # Ensure this is correct
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
# EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
# EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
# EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "pk@12gmail.com")
# EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "Prateek@123")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py


# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'INFO',  # Adjust this to DEBUG, INFO, WARNING, ERROR, or CRITICAL as needed
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',  # You can change this to a different level like 'INFO'
            'propagate': True,
        },
        'your_custom_logger': {  # For your custom loggers
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}



SESSION_ENGINE = "django.contrib.sessions.backends.db"  #  Ensure this is set
SESSION_COOKIE_AGE = 1209600  # adjust as needed
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True
APPEND_SLASH = True
CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:8000",  # Localhost
    "http://localhost:8000",
    "https://yourdomain.com",  # Add your production domain if needed
]


EMAIL_HOST_USER = "pythonweb@exoticaitsolutions.com"
DEFAULT_FROM_EMAIL = "pythonweb@exoticaitsolutions.com"
SERVER_EMAIL = "pythonweb@exoticaitsolutions.com"
# Session expires after 30 minutes of inactivity
SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Logout on browser close
SESSION_SAVE_EVERY_REQUEST = True  # Reset session timer on activity
