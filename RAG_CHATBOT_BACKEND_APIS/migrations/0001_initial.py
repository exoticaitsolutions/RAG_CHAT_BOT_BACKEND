

import RAG_CHATBOT_BACKEND_APIS.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatbotAppearance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chatbot_id', models.CharField(max_length=50)),
                ('display_name', models.TextField(max_length=2000)),
                ('footer_name', models.TextField(default='Powered by My AI Solutions.', max_length=2000)),
                ('initial_message', models.TextField(blank=True, default='Hi! What can I help with you?')),
                ('chatbot_theme', models.CharField(blank=True, default='#8d54a2', max_length=10)),
                ('chatbot_mode', models.BooleanField(default=False)),
                ('suggested_messages', models.TextField(blank=True)),
                ('destination', models.TextField(blank=True)),
                ('chatbot_image', models.ImageField(blank=True, default='default_images/chatbot_image.png', max_length=255, null=True, upload_to='chatbot_images/')),
                ('chatbot_launcher_icon', models.ImageField(blank=True, default='default_images/avatar-1.png', max_length=255, null=True, upload_to='launcher_icon/')),
                ('top_bar_background', models.CharField(default='#8d54a2', max_length=10)),
                ('top_bar_textcolor', models.CharField(default='#000000', max_length=10)),
                ('bot_message_background', models.CharField(default='#ffffff', max_length=10)),
                ('bot_message_color', models.CharField(default='#46464e', max_length=10)),
                ('user_message_background', models.CharField(default='#ffffff', max_length=10)),
                ('user_message_color', models.CharField(default='#46464e', max_length=10)),
                ('chatbot_background_color', models.CharField(default='#e6e6e6', max_length=10)),
                ('chatbot_background_pattern', models.ImageField(blank=True, max_length=255, upload_to='chatbot_background_patterns/')),
                ('font_family', models.CharField(default='Arial', max_length=255)),
                ('font_size', models.PositiveIntegerField(blank=True, default=14)),
                ('widget_width', models.PositiveIntegerField(blank=True, default=25)),
                ('widget_height', models.PositiveIntegerField(blank=True, default=450)),
                ('widget_position', models.CharField(default='right', max_length=5)),
                ('show_popup_notification', models.BooleanField(default=True)),
                ('delay_showing_popup_notification', models.PositiveIntegerField(default=1)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('iso3', models.CharField(blank=True, max_length=3, null=True)),
                ('numeric_code', models.CharField(blank=True, max_length=3, null=True)),
                ('iso2', models.CharField(blank=True, max_length=2, null=True)),
                ('phonecode', models.CharField(blank=True, max_length=255, null=True)),
                ('currency_name', models.CharField(blank=True, max_length=255, null=True)),
                ('currency_symbol', models.CharField(blank=True, max_length=255, null=True)),
                ('tld', models.CharField(blank=True, max_length=255, null=True)),
                ('native', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('subregion', models.CharField(blank=True, max_length=255, null=True)),
                ('nationality', models.CharField(blank=True, max_length=255, null=True)),
                ('timezones', models.TextField(blank=True, null=True)),
                ('translations', models.TextField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('emoji', models.CharField(blank=True, max_length=191, null=True)),
                ('emojiU', models.CharField(blank=True, max_length=191, null=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('flag', models.BooleanField(default=True)),
                ('wikiDataId', models.CharField(blank=True, help_text='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pdf_embedding_status', models.CharField(default='pending', max_length=20)),
                ('pdf_embadding_error_or_message', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UrlUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url_embedding_status', models.CharField(default='pending', max_length=50)),
                ('url_embedding_error_or_message', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VisitorVisits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visitor_id', models.CharField(default=RAG_CHATBOT_BACKEND_APIS.models.get_random_str, max_length=255)),
                ('chatbot_id', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('geo_location', models.CharField(blank=True, max_length=255)),
                ('referrer', models.CharField(blank=True, max_length=255)),
                ('landing_page', models.CharField(blank=True, max_length=255)),
                ('browser', models.CharField(blank=True, max_length=255)),
                ('device', models.CharField(blank=True, max_length=255)),
                ('os', models.CharField(blank=True, max_length=255)),
                ('date_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChatBotDB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chatbot_name', models.CharField(max_length=200)),
                ('chat_bot_media_path', models.TextField(blank=True)),
                ('chat_bot_chroma_db_path', models.TextField(blank=True)),
                ('llm_model', models.CharField(choices=[('system openai', 'System OpenAi'), ('private openai', 'Private OpenAi'), ('gpt4all', 'GPT4ALL'), ('huggingface', 'HuggingFace')], default='system openai', max_length=50)),
                ('model', models.CharField(choices=[('gpt-3.5-turbo', 'gpt-3.5-turbo'), ('gpt-4', 'gpt-4')], default='gpt-3.5-turbo', max_length=50)),
                ('openai_key', models.TextField(default='')),
                ('vector_database', models.CharField(choices=[('chroma', 'Chroma'), ('pinecone', 'Pinecone')], default='chroma', max_length=200)),
                ('pinecone_key', models.CharField(default='', max_length=200)),
                ('pinecone_env', models.TextField(default='')),
                ('pinecone_user_index', models.CharField(default='', max_length=200)),
                ('temperature', models.FloatField(default=0.4)),
                ('context', models.TextField(default="You are a conversational chatbot and Use the following pieces of context to answer the question at the end. You will try your best to give a logical answer. If you don't know the answer, just say that you don't know, don't try to make up an answer")),
                ('chatbot_id', models.CharField(max_length=50)),
                ('hits', models.PositiveIntegerField(default=10)),
                ('seconds', models.PositiveIntegerField(default=60)),
                ('visibility', models.CharField(default='private', max_length=50)),
                ('login_status', models.CharField(choices=[('anonymous', 'Anonymous'), ('login', 'Login')], default='login', max_length=20)),
                ('icon_url', models.ImageField(default='default_images/chatbot_image.png', max_length=255, upload_to='chatbot')),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chatbot_appearance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotappearance')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250)),
                ('filepath', models.FileField(default='', upload_to=RAG_CHATBOT_BACKEND_APIS.models.Document.upload_path)),
                ('size', models.CharField(default='', max_length=250)),
                ('no_of_characters', models.PositiveIntegerField(blank=True, default=0)),
                ('no_of_chunks', models.PositiveIntegerField(blank=True, default=0)),
                ('status', models.CharField(default='pending', max_length=10)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('chatbot', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('country_code', models.CharField(max_length=2)),
                ('fips_code', models.CharField(blank=True, max_length=255, null=True)),
                ('iso2', models.CharField(blank=True, max_length=255, null=True)),
                ('state_type', models.CharField(blank=True, max_length=191, null=True)),
                ('latitude', models.TextField(blank=True, null=True)),
                ('longitude', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('flag', models.BooleanField(default=True)),
                ('wikiDataId', models.CharField(blank=True, help_text='Rapid API GeoDB Cities', max_length=255, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='RAG_CHATBOT_BACKEND_APIS.country')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.CharField(default=RAG_CHATBOT_BACKEND_APIS.models.get_random_str, editable=False, max_length=255, unique=True)),
                ('slug', models.SlugField(allow_unicode=True, blank=True, default='')),
                ('phone_code', models.CharField(blank=True, default='', max_length=10)),
                ('phone_number', models.CharField(blank=True, default='', max_length=15)),
                ('profile_pic', models.FileField(blank=True, max_length=250, upload_to=RAG_CHATBOT_BACKEND_APIS.models.user_directory_path)),
                ('profile_url', models.TextField(blank=True, default='')),
                ('name', models.CharField(blank=True, default='', max_length=250)),
                ('zip_code', models.CharField(blank=True, default='', max_length=250)),
                ('organization', models.CharField(blank=True, default='', max_length=250)),
                ('address', models.TextField(blank=True, default='')),
                ('state', models.CharField(blank=True, default='', max_length=250)),
                ('country', models.CharField(blank=True, default='US', max_length=250)),
                ('age', models.CharField(blank=True, default='', max_length=250)),
                ('user_chroma_path', models.TextField(blank=True, default='')),
                ('user_upload_path', models.TextField(blank=True, default='')),
                ('language', models.CharField(blank=True, default='', max_length=250)),
                ('status', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteDB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(default='')),
                ('no_of_characters', models.PositiveIntegerField(blank=True, default=0)),
                ('no_of_chunks', models.PositiveIntegerField(blank=True, default=0)),
                ('status', models.CharField(default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteCollectionIds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_id', models.CharField(default='', max_length=100)),
                ('web_name', models.CharField(default='', max_length=500)),
                ('collection', models.CharField(default='', max_length=100)),
                ('chroma_dir', models.CharField(default='', max_length=100)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('website', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.websitedb')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentNamespaceIds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_id', models.CharField(default='', max_length=100)),
                ('doc_name', models.CharField(default='', max_length=500)),
                ('namespace', models.CharField(default='', max_length=100)),
                ('index_name', models.CharField(default='None', max_length=100)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.document')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentCollectionIds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_id', models.CharField(default='', max_length=100)),
                ('doc_name', models.CharField(default='', max_length=500)),
                ('collection', models.CharField(default='', max_length=100)),
                ('chroma_dir', models.TextField(default='')),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.document')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(default='', max_length=500)),
                ('answer', models.TextField(default='', max_length=5000)),
                ('question_datetime', models.DateTimeField(auto_now_add=True)),
                ('answer_datetime', models.DateTimeField(auto_now_add=True)),
                ('feedback_flag', models.CharField(choices=[('thumbsup', 'Thumbs Up'), ('thumbsdown', 'Thumbs Down')], max_length=50, null=True)),
                ('feedback_datetime', models.DateTimeField(null=True)),
                ('positive_comment', models.TextField(null=True)),
                ('negative_comment', models.TextField(null=True)),
                ('category', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chatbotdb',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatbotappearance',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(default='', max_length=50)),
                ('history', models.CharField(default='', max_length=50)),
                ('question', models.CharField(default='', max_length=500)),
                ('answer', models.TextField(default='', max_length=5000)),
                ('sent', models.DateTimeField(auto_now_add=True)),
                ('received', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='RAG_CHATBOT_BACKEND_APIS.chatbotdb')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
